x-teranode-base: &teranode-base
  image: 434394763103.dkr.ecr.eu-north-1.amazonaws.com/teranode:latest
  depends_on:
    - postgres
    - kafka-shared
  networks:
    - teranode-network
  volumes:
    - ./data:/app/data
  expose:
    - 8081-8093

x-teranode-base-1: &teranode-base-1
  <<: *teranode-base
  container_name: teranode-base-1
  depends_on:
    - kafka-shared
    - postgres
    - jaeger
  networks:
    - teranode-network
  environment:
    SETTINGS_CONTEXT: docker.ss.teranode1
    logLevel: "DEBUG"
    JAEGER_AGENT_HOST: jaeger
    JAEGER_AGENT_PORT: 6831
  volumes:
    - ./wait.sh:/app/wait.sh
    - ./settings_local.conf:/app/settings_local.conf
    - ./data/teranode1/txstore:/app/data/txstore
    - ./data/teranode1/subtreestore:/app/data/subtreestore
    - ./data/teranode1/blockstore:/app/data/blockstore

x-teranode-coinbase-base: &teranode-coinbase-base
  image: 434394763103.dkr.ecr.eu-north-1.amazonaws.com/teranode-coinbase:latest
  network_mode: "host"
  depends_on:
    - postgres
    - kafka-shared

networks:
  teranode-network:
    name: my-teranode-network

volumes:
  postgres-data:
  grafana-data:

services:
  teranode-builder:
    container_name: teranode-builder
    image: 434394763103.dkr.ecr.eu-north-1.amazonaws.com/teranode:latest
    build:
      context: ..
      dockerfile: Dockerfile
      args:
        BASE_IMG: ghcr.io/bsv-blockchain/teranode-base:build-latest
        RUN_IMG: ghcr.io/bsv-blockchain/teranode-base:run-latest
    networks:
      - teranode-network
    entrypoint: ["pwd"]

  jaeger:
    image: jaegertracing/all-in-one:1.59
    container_name: jaeger
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    networks:
      - teranode-network

  postgres:
    container_name: postgres
    image: postgres:16
    networks:
      - teranode-network
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: really_strong_password_change_me
      POSTGRES_DB: postgres
    ports:
      - 5432:5432
    expose:
      - 5432
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres-data:/var/lib/postgresql/data
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka-shared:
    container_name: kafka-shared
    image: redpandadata/redpanda:latest
    mem_limit: 256m
    networks:
      - teranode-network
    command:
      - redpanda start
      - --smp 1
      - --overprovisioned
      - --node-id 0
      - --kafka-addr PLAINTEXT://0.0.0.0:9092
      - --advertise-kafka-addr PLAINTEXT://localhost:9092
      - --pandaproxy-addr 0.0.0.0:9093
      - --advertise-pandaproxy-addr localhost:9093
    ports:
      - "9092:9092"   # Kafka broker (for chaos tests)
      - "9093:9093"   # Pandaproxy

  kafka-console-shared:
    container_name: kafka-console-shared
    image: docker.redpanda.com/redpandadata/console:latest
    networks:
      - teranode-network
    restart: on-failure
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka-shared:9092"]
    ports:
      - "18080:8080"
    depends_on:
      - kafka-shared

  # Toxiproxy for chaos testing
  toxiproxy-postgres:
    container_name: toxiproxy-postgres
    image: ghcr.io/shopify/toxiproxy:2.9.0
    networks:
      - teranode-network
    ports:
      - "8474:8474"   # Toxiproxy API
      - "15432:15432" # Proxied PostgreSQL port
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8474/version"]
      interval: 5s
      timeout: 3s
      retries: 5
    command: -host=0.0.0.0 -config=/config/toxiproxy.json
    volumes:
      - ./scripts/toxiproxy-config.json:/config/toxiproxy.json

  toxiproxy-kafka:
    container_name: toxiproxy-kafka
    image: ghcr.io/shopify/toxiproxy:2.9.0
    networks:
      - teranode-network
    ports:
      - "8475:8474"   # Toxiproxy API
      - "19092:19092" # Proxied Kafka port
    depends_on:
      - kafka-shared
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8474/version"]
      interval: 5s
      timeout: 3s
      retries: 5
    command: -host=0.0.0.0 -config=/config/toxiproxy.json
    volumes:
      - ./scripts/toxiproxy-config.json:/config/toxiproxy.json

  blockchain-1:
    <<: *teranode-base-1
    container_name: blockchain-1
    entrypoint:
      [
        "/app/wait.sh",
        "postgres",
        "5432",
        "0",
        "--",
        "/app/wait.sh",
        "kafka-shared",
        "9092",
        "0",
        "--",
        "/app/teranode.run",
        "-all=0",
        "-blockchain=1",
      ]
    environment:
      SETTINGS_CONTEXT: docker.ss.teranode1
      JAEGER_SERVICE_NAME: blockchain-1
    ports:
      - "8082:8082"
      - "8087:8087"
    #   - "18081-18089:8081-8089"
    #   - "18090-18097:8090-8097"
    #   - "19091:9091"
    #   - "19905:9905"
    #   - "19292:9292"

  p2p-1:
    <<: *teranode-base-1
    container_name: p2p-1
    entrypoint:
      [
        "/app/wait.sh",
        "postgres",
        "5432",
        "0",
        "--",
        "/app/wait.sh",
        "kafka-shared",
        "9092",
        "0",
        "--",
        "/app/teranode.run",
        "-all=0",
        "-p2p=1",
      ]
    environment:
      SETTINGS_CONTEXT: docker.ss.teranode1
      JAEGER_SERVICE_NAME: p2p-1
    # ports:
    #   - "18081-18089:8081-8089"
    #   - "18090-18097:8090-8097"
    #   - "19091:9091"
    #   - "19905:9905"
    #   - "19292:9292"

  validator-1:
    <<: *teranode-base-1
    container_name: validator-1
    entrypoint:
      [
        "/app/wait.sh",
        "postgres",
        "5432",
        "0",
        "--",
        "/app/wait.sh",
        "kafka-shared",
        "9092",
        "0",
        "--",
        "/app/teranode.run",
        "-all=0",
        "-validator=1",
      ]
    environment:
      SETTINGS_CONTEXT: docker.ss.teranode1
      JAEGER_SERVICE_NAME: validator-1
    # ports:
    #   - "18081-18089:8081-8089"
    #   - "18090-18097:8090-8097"
    #   - "19091:9091"
    #   - "19905:9905"
    #   - "19292:9292"

  propagation-1:
    <<: *teranode-base-1
    container_name: propagation-1
    entrypoint:
      [
        "/app/wait.sh",
        "postgres",
        "5432",
        "0",
        "--",
        "/app/wait.sh",
        "kafka-shared",
        "9092",
        "0",
        "--",
        "/app/teranode.run",
        "-all=0",
        "-propagation=1",
      ]
    environment:
      SETTINGS_CONTEXT: docker.ss.teranode1
      JAEGER_SERVICE_NAME: propagation-1
    # ports:
    #   - "18081-18089:8081-8089"
    #   - "18090-18097:8090-8097"
    #   - "19091:9091"
    #   - "19905:9905"
    #   - "19292:9292"

  blockassembly-1:
    <<: *teranode-base-1
    container_name: blockassembly-1
    entrypoint:
      [
        "/app/wait.sh",
        "postgres",
        "5432",
        "0",
        "--",
        "/app/wait.sh",
        "kafka-shared",
        "9092",
        "0",
        "--",
        "/app/teranode.run",
        "-all=0",
        "-blockassembly=1",
      ]
    environment:
      SETTINGS_CONTEXT: docker.ss.teranode1
      JAEGER_SERVICE_NAME: blockassembly-1
    # ports:
    #   - "18081-18089:8081-8089"
    #   - "18090-18097:8090-8097"
    #   - "19091:9091"
    #   - "19905:9905"
    #   - "19292:9292"

  subtreevalidation-1:
    <<: *teranode-base-1
    container_name: subtreevalidation-1
    entrypoint:
      [
        "/app/wait.sh",
        "postgres",
        "5432",
        "0",
        "--",
        "/app/wait.sh",
        "kafka-shared",
        "9092",
        "0",
        "--",
        "/app/teranode.run",
        "-all=0",
        "-subtreevalidation=1",
      ]
    environment:
      SETTINGS_CONTEXT: docker.ss.teranode1
      JAEGER_SERVICE_NAME: subtreevalidation-1
    # ports:
    #   - "18081-18089:8081-8089"
    #   - "18090-18097:8090-8097"
    #   - "19091:9091"
    #   - "19905:9905"
    #   - "19292:9292"

  blockvalidation-1:
    <<: *teranode-base-1
    container_name: blockvalidation-1
    entrypoint:
      [
        "/app/wait.sh",
        "postgres",
        "5432",
        "0",
        "--",
        "/app/wait.sh",
        "kafka-shared",
        "9092",
        "0",
        "--",
        "/app/teranode.run",
        "-all=0",
        "-blockvalidation=1",
      ]
    environment:
      SETTINGS_CONTEXT: docker.ss.teranode1
      JAEGER_SERVICE_NAME: blockvalidation-1
    # ports:
    #   - "18081-18089:8081-8089"
    #   - "18090-18097:8090-8097"
    #   - "19091:9091"
    #   - "19905:9905"
    #   - "19292:9292"

  asset-1:
    <<: *teranode-base-1
    container_name: asset-1
    entrypoint:
      [
        "/app/wait.sh",
        "postgres",
        "5432",
        "0",
        "--",
        "/app/wait.sh",
        "kafka-shared",
        "9092",
        "0",
        "--",
        "/app/teranode.run",
        "-all=0",
        "-asset=1",
      ]
    environment:
      SETTINGS_CONTEXT: docker.ss.teranode1
      JAEGER_SERVICE_NAME: asset-1
    ports:
      - "8090:8090"
    #   - "18081-18089:8081-8089"
    #   - "18090-18097:8090-8097"
    #   - "19091:9091"
    #   - "19905:9905"
    #   - "19292:9292"

  coinbase-1:
    <<: *teranode-base-1
    container_name: coinbase-1
    entrypoint:
      [
        "/app/wait.sh",
        "postgres",
        "5432",
        "0",
        "--",
        "/app/wait.sh",
        "kafka-shared",
        "9092",
        "0",
        "--",
        "/app/teranode.run",
        "-all=0",
        "-coinbase=1",
      ]
    environment:
      SETTINGS_CONTEXT: docker.ss.teranode1
      JAEGER_SERVICE_NAME: coinbase-1
    # ports:
    #   - "18081-18089:8081-8089"
    #   - "18090-18097:8090-8097"
    #   - "19091:9091"
    #   - "19905:9905"
    #   - "19292:9292"

  blockpersister-1:
    <<: *teranode-base-1
    container_name: blockpersister-1
    entrypoint:
      [
        "/app/wait.sh",
        "postgres",
        "5432",
        "0",
        "--",
        "/app/wait.sh",
        "kafka-shared",
        "9092",
        "0",
        "--",
        "/app/teranode.run",
        "-all=0",
        "-blockpersister=1",
      ]
    environment:
      SETTINGS_CONTEXT: docker.ss.teranode1
      JAEGER_SERVICE_NAME: blockpersister-1
    # ports:
    #   - "18081-18089:8081-8089"
    #   - "18090-18097:8090-8097"
    #   - "19091:9091"
    #   - "19905:9905"
    #   - "19292:9292"

  prometheus-1:
    container_name: prometheus-1
    image: prom/prometheus:v2.44.0
    mem_limit: 64m
    ports:
      - "19090:9090"
    networks:
      - teranode-network
    volumes:
      - ./prometheus/prometheus-1.yml:/etc/prometheus/prometheus.yml

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks:
      - teranode-network
    volumes:
      - ./grafana/datasources/main.yaml:/etc/grafana/provisioning/datasources/main.yaml
      - ./grafana/dashboards/main.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus-1
